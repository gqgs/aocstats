// Code generated by argsgen.
// DO NOT EDIT!
package main

import (
    "errors"
    "flag"
    "fmt"
    "os"
)

func (o *options) flagSet() *flag.FlagSet {
    flagSet := flag.NewFlagSet(os.Args[0], flag.ExitOnError)
    flagSet.IntVar(&o.startYear, "startYear", o.startYear, "start year")
    flagSet.IntVar(&o.endYear, "endYear", o.endYear, "end year")
    flagSet.IntVar(&o.startDay, "startDay", o.startDay, "start day")
    flagSet.IntVar(&o.endDay, "endDay", o.endDay, "end day")
    flagSet.IntVar(&o.top, "top", o.top, "number of top times to consider")
    flagSet.BoolVar(&o.header, "header", o.header, "generate CSV header")
    return flagSet
}

// Parse parses the arguments in os.Args
func (o *options) Parse() error {
    flagSet := o.flagSet()
    args := os.Args[1:]
    for len(args) > 0 {
        if err := flagSet.Parse(args); err != nil {
            return err
        }

        if remaining := flagSet.NArg(); remaining > 0 {
            posIndex := len(args) - remaining
            args = args[posIndex+1:]
            continue
        }
        break
    }

    if o.startYear == 0 {
        return errors.New("argument 'startYear' is required")
    }
    if o.endYear == 0 {
        return errors.New("argument 'endYear' is required")
    }
    if o.startDay == 0 {
        return errors.New("argument 'startDay' is required")
    }
    if o.endDay == 0 {
        return errors.New("argument 'endDay' is required")
    }
    if o.top == 0 {
        return errors.New("argument 'top' is required")
    }
    return nil
}

// MustParse parses the arguments in os.Args or exists on error
func (o *options) MustParse() {
    if err := o.Parse(); err != nil {
        o.flagSet().PrintDefaults()
		fmt.Fprintln(os.Stderr)
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
    }
}
